<?php

namespace App\Controller;

use Cake\Controller\Controller;

class EventsController extends AppController
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        // Allow methods
        // $this->Auth->allow(['logout', 'add']);
    }

    public function index()
    {
        $events = $this->Events->find()->contain(['Users', 'Guests'])->order(['beginning' => 'DESC']);;
        $this->set(compact('events'));
    }

    public function view($id)
    {
        $event = $this->Events->get($id, ['contain' => ['Users', 'Guests.Users']]);
        /*
        $event = $this->Events->find()->where(['id' => $id])->contain(['Users','Guests.Users'])->first();
        if($event->isEmpty()) {
            $this->Flash->error('Événement introuvable');
            return $this->redirect(['action' => 'index']);
        }
        */
        $this->set(compact('event'));
    }

    public function add()
    {
        $n = $this->Events->newEntity();
        $this->set(compact('n'));

        // Get the current user information
        $u = $this->Auth->user();
        // Define user_id from current auth id
        $n->user_id = $u['id'];

        // Check if is from post method
        if ($this->request->is(['post'])) {
            // Get form data
            $n = $this->Events->patchEntity($n, $this->request->getData());

            // Picture test logic

            // If picture file sent
            if (!empty($this->request->getData()['picture']['name'])) {
                // Test image format
                if (!in_array($this->request->getData()['picture']['type'], ['image/png', 'image/jpg', 'image/jpeg', 'image/gif'])) {
                    $this->Flash->error('Format erroné. Liste des formats autorisés: .png, .jpeg, .jpg, .gif');
                    return $this->redirect($this->referer());
                }
            }

            // On recupere l extension --> pathinfo
            $ext = pathinfo($this->request->getData()['picture']['name'], PATHINFO_EXTENSION);
            // on creer le nouveau nom
            $newName = 'event-' . time() . '.' . $ext;
            echo $newName;
            // on deplace le fichier de la memoire temporaire vers le dossier picture
            move_uploaded_file($this->request->getData()['picture']['tmp_name'], WWW_ROOT . 'img/events/' . $newName);
            // on remplace le npm de l'objet à sauvegarder
            $n->picture = $newName;
            // Test saving record on database
            if ($result = $this->Events->save($n)) {
                $this->Flash->success('Votre événement a été correctement ajouté');
                return $this->redirect(['action' => 'index']);
            }
            // Error while trying to save
            $this->Flash->error('Une erreur est survenue. Veuillez réessayer.');
        }
    }

    public function edit($id)
    {
        $u = $this->Auth->user();
        $e = $this->Events->find()->where(['id' => $id]);
        // If not result found
        if ($e->isEmpty()) {
            $this->Flash->error('Événement introuvable');
            return $this->redirect(['action' => 'index']);
        }
        // Get the first record as element
        $firstElement = $e->first();
        // Check if current user is author's event
        if ($firstElement->user_id === $u['id']) {
            // Share to the view
            $this->set('e', $firstElement);
            // Check if it's from post method
            if ($this->request->is(['post', 'put'])) {
                $this->Events->patchEntity($firstElement, $this->request->getData());
                if ($this->Events->save($firstElement)) {
                    $this->Flash->success('Modification(s) apportée(s) à l\'événement');
                    return $this->redirect(['action' => 'view', $id]);
                }
                $this->Flash->error('Erreur lors de la tentative de modification');
            }
        } else {
            $this->Flash->error('Vous n\'êtes pas authorisé à modifier ce contenu');
            return $this->redirect(['action' => 'index']);
        }
    }

    public function editpicture()
    {
        // on recupere les infos par rapport à l'avatar actuel ( user connecté )
        $modif = $this->Users->get($this->Auth->user('id'));
        // $modif = $this->Users->find()->where(['id' => $u['id']]);
        $this->set(compact('modif'));
        // On copie l'ancien nom de fichier
        $ancienNom = $modif->avatar;

        // on copie en mémoire le nom de l'ancien fichier
        $currentFileName = $modif->avatar;

        // si on recoit un form
        if ($this->request->is(['post', 'put'])) {
            // on patch les données
            $this->Users->patchEntity($modif, $this->request->getData());

            // on recupere les infos par rapport à l'avatar actuel ( user connecté )
            $modif = $this->Users->get($this->Auth->user('id'));
            // si on a pas recu le fichier ou le format de l'image n est pas le bon
            if (empty($this->request->getData()['picture']['name']) || !in_array($this->request->getData()['picture']['type'], ['image/png', 'image/jpg', 'image/jpeg', 'image/gif'])) {
                // Flash error
                $this->Flash->error('Format erroné. Autosié : png, pdf, gif');
            } else {
                // On recupere l extension --> pathinfo
                $ext = pathinfo($this->request->getData()['picture']['name'], PATHINFO_EXTENSION);
                // on creer le nouveau nom
                $newName = 'event-' . $modif->id . '-' . time() . '.' . $ext;
                // on deplace le fichier de la memoire temporaire vers le dossier avatars
                move_uploaded_file($this->request->getData()['picture']['tmp_name'], WWW_ROOT . 'img/events/' . $newName);
                // on remplace le npm de l'objet à sauvegarder
                $modif->avatar = $newName;
                // On essaie la sauvegarde (if else)
                if ($this->Users->save($modif)) {
                    $this->Flash->success('Image uploadée');
                    // si l'ancien fichier existe --> !empty && file_exists
                    if (!empty($ancienNom) && file_exists(WWW_ROOT . 'img/events/' . $ancienNom)) {
                        unlink(WWW_ROOT . 'img/events/' . $ancienNom);
                    }

                    return $this->redirect(['action' => 'view', $modif->id]);
                } else {
                    $this->Flash->error('Modification impossible');
                }
            }
        }
    }

    public function invite($eventID)
    {
        $n = $this->Events->newEntity();
        $this->set(compact('n'));

        $event = $this->Events->get($eventID, ['contain' => ['Users', 'Guests']]);
        $this->set(compact('event'));

        // Check if is from post method
        if ($this->request->is(['post'])) {
            // Get form data
            $n = $this->Events->patchEntity($n, $this->request->getData());
            $n->event_id = intval($eventID);

            // Disable self invitation
            // Get current user from auth
            $u = $this->Auth->user();

            echo '<pre>' . var_dump($n->user_id) . '</pre>';
            echo '<pre>' . var_dump($n->event_id) . '</pre>';
            echo '<pre>' . var_dump($u['id']) . '</pre>';

            if ($n->user_id === $u['id']) {
                $this->Flash->error('Vous participez déjà à cet événément');
                return $this->redirect(['action' => 'invite', $eventID]);
            }
            // Check if invitation already sent to user
            $existing = $this->Events->Guests->find()->where(['user_id' => $n->user_id, 'event_id' => $n->event_id]);
            $firstEl = $existing->first();

            if ($firstEl) {
                $this->Flash->error('Une invitation a déjà été envoyée à l\'utilisateur');
                return $this->redirect(['action' => 'invite', $eventID]);
            }

            // Test saving record on database
            if ($result = $this->Events->Guests->save($n)) {
                $this->Flash->success('Votre invitation a été correctement envoyée');
                return $this->redirect(['action' => 'view', $eventID]);
            }
            // Error while trying to save
            $this->Flash->error('Une erreur est survenue. Veuillez réessayer.');
        }
    }
}
