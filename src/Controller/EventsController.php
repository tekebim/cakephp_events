<?php

namespace App\Controller;

use Cake\Controller\Controller;
use Cake\ORM\TableRegistry;

class EventsController extends AppController
{
    public $paginate = [
        'limit' => 5,
        'order' => [
            'Events.beginning' => 'asc'
        ]
    ];

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadComponent('Paginator');
        // $this->loadComponent('Authorization');
    }

    public function isCurrentAuthor($authorID)
    {
        $u = $this->Auth->user();
        $currentUser = $u['id'];
        if ($authorID === $currentUser) {
            return true;
        } else {
            return false;
        }

    }

    public function index()
    {
        $events = $this->Events->find()
            ->contain(['Users', 'Guests'])
            // ->select(['Users.login'])
            ->order(['beginning' => 'DESC']);

        $this->set('events', $this->paginate($events));
    }

    public function manage()
    {
        $u = $this->Auth->user();
        // Get the current user events
        $events = $this->Events->find()->where(['user_id' => $u['id']])->contain(['Users', 'Guests'])->order(['beginning' => 'DESC']);
        // Share to view
        $this->set(compact('events'));
    }

    public function view($id)
    {
        // Request
        $req = $this->Events->find()->where(['Events.id' => $id])->contain(['Users', 'Guests.Users']);
        // Check if current element exist
        if ($req->isEmpty()) {
            // Redirect to list view with flash error
            $this->Flash->error('Événement introuvable');
            return $this->redirect(['action' => 'index']);
        }
        // Get tht first record
        $event = $req->first();
        // Share to view
        $this->set(compact('event'));
    }

    public function add()
    {
        $n = $this->Events->newEntity();
        $this->set(compact('n'));
        // Get the current user information
        $u = $this->Auth->user();
        // Define user_id from current auth id
        $n->user_id = $u['id'];
        // Check if is from post method
        if ($this->request->is(['post'])) {
            // Get form data
            $n = $this->Events->patchEntity($n, $this->request->getData());
            /*
            * Picture test logic
            */
            // If picture file sent
            if (!empty($this->request->getData()['picture']['name'])) {
                // Test image format
                if (!in_array($this->request->getData()['picture']['type'], ['image/png', 'image/jpg', 'image/jpeg', 'image/gif'])) {
                    $this->Flash->error('Format erroné. Liste des formats autorisés: .png, .jpeg, .jpg, .gif');
                    return $this->redirect($this->referer());
                }
            }

            // Get file extension > pathinfo
            $ext = pathinfo($this->request->getData()['picture']['name'], PATHINFO_EXTENSION);
            // Generate new name
            $newName = 'event-' . time() . '.' . $ext;
            // Move the file from tempory memory to events folder
            move_uploaded_file($this->request->getData()['picture']['tmp_name'], WWW_ROOT . 'img/events/' . $newName);
            // Change the picture name by the the name generated
            $n->picture = $newName;
            // Test saving record on database
            if ($result = $this->Events->save($n)) {
                $this->Flash->success('Votre événement a été correctement ajouté');
                return $this->redirect(['action' => 'manage']);
            }
            // Error while trying to save
            $this->Flash->error('Une erreur est survenue. Veuillez réessayer.');
        }
    }

    public function edit($id)
    {
        $e = $this->Events->find()->where(['id' => $id]);
        // If not result found
        if ($e->isEmpty()) {
            $this->Flash->error('Événement introuvable');
            return $this->redirect(['action' => 'index']);
        }
        // Get the first record as element
        $firstElement = $e->first();
        // Check if current user is author's event
        if ($this->isCurrentAuthor($firstElement->user_id)) {
            // Share to the view
            $this->set('e', $firstElement);
            // Check if it's from post method
            if ($this->request->is(['post', 'put'])) {
                $this->Events->patchEntity($firstElement, $this->request->getData());
                if ($this->Events->save($firstElement)) {
                    $this->Flash->success('Modification(s) apportée(s) à l\'événement');
                    return $this->redirect(['action' => 'view', $id]);
                }
                $this->Flash->error('Erreur lors de la tentative de modification');
            }
        } else {
            $this->Flash->error('Vous n\'êtes pas autorisé à modifier ce contenu');
            return $this->redirect(['action' => 'index']);
        }
    }

    public function editpicture()
    {
        // on recupere les infos par rapport à la photo actuelle
        $modif = $this->Users->get($this->Auth->user('id'));
        // $modif = $this->Users->find()->where(['id' => $u['id']]);
        $this->set(compact('modif'));
        // On copie l'ancien nom de fichier
        $ancienNom = $modif->avatar;

        // on copie en mémoire le nom de l'ancien fichier
        $currentFileName = $modif->avatar;

        // si on recoit un form
        if ($this->request->is(['post', 'put'])) {
            // on patch les données
            $this->Users->patchEntity($modif, $this->request->getData());

            // on recupere les infos par rapport à l'avatar actuel ( user connecté )
            $modif = $this->Users->get($this->Auth->user('id'));
            // si on a pas recu le fichier ou le format de l'image n est pas le bon
            if (empty($this->request->getData()['picture']['name']) || !in_array($this->request->getData()['picture']['type'], ['image/png', 'image/jpg', 'image/jpeg', 'image/gif'])) {
                // Flash error
                $this->Flash->error('Format erroné. Autosié : png, pdf, gif');
            } else {
                // On recupere l extension --> pathinfo
                $ext = pathinfo($this->request->getData()['picture']['name'], PATHINFO_EXTENSION);
                // on creer le nouveau nom
                $newName = 'event-' . $modif->id . '-' . time() . '.' . $ext;
                // on deplace le fichier de la memoire temporaire vers le dossier avatars
                move_uploaded_file($this->request->getData()['picture']['tmp_name'], WWW_ROOT . 'img/events/' . $newName);
                // on remplace le npm de l'objet à sauvegarder
                $modif->avatar = $newName;
                // On essaie la sauvegarde (if else)
                if ($this->Users->save($modif)) {
                    $this->Flash->success('Image uploadée');
                    // si l'ancien fichier existe --> !empty && file_exists
                    if (!empty($ancienNom) && file_exists(WWW_ROOT . 'img/events/' . $ancienNom)) {
                        unlink(WWW_ROOT . 'img/events/' . $ancienNom);
                    }

                    return $this->redirect(['action' => 'view', $modif->id]);
                } else {
                    $this->Flash->error('Modification impossible');
                }
            }
        }
    }

    public function invite($eventID)
    {
        // Get current user from auth
        $u = $this->Auth->user();
        // Create new entity
        $n = $this->Events->newEntity();
        // Share to the view
        $this->set(compact('n'));
        // Request
        $req = $this->Events->find()
            ->where(['Events.id' => $eventID])
            ->contain(['Users', 'Guests', 'Guests.Users'])
            ->select(['Events.id', 'Events.user_id', 'Users.login', 'Users.id']);
        // Get the first record
        $event = $req->first();

        // Check if current user is author's event
        if ($this->isCurrentAuthor($event->user_id)) {

            // Query to find all guests
            $req_guests = $this->Events->Guests->find()
                ->select(['user_id'])
                ->where(['event_id' => $eventID]);

            // Query to find all users
            $req_users = $this->Events->Users->find()
                ->where(['Users.id !=' => $u['id'], 'Users.id NOT IN' => $req_guests])
                ->select(['Users.id', 'Users.login'])
                ->toArray();

            // Create array of all users
            $users = [];
            foreach ($req_users as $user) {
                // For each results add to array ( id as value and login as wording
                $users[$user['id']] = $user['login'];
            }
            // Share to the view
            $this->set(compact('event', 'users', 'req_guests'));

            // Check if is from post method
            if ($this->request->is(['post'])) {
                $n = $this->request->getData();

                $new = [];
                foreach ($n['user_id'] as $entity) {
                    array_push($new, [
                        "event_id" => intval($eventID),
                        "user_id" => intval($entity),
                        "status" => 'validated',
                    ]);
                }

                $articles = TableRegistry::get('Guests');
                $entities = $articles->newEntities($new);
                // $result = $articles->saveMany($entities);

                foreach ($entities as $entity) {
                    // $articles->save($entity);
                }


                if ($result = $articles->saveMany($entities)) {
                    $this->Flash->success('Votre invitation a été correctement envoyée');
                    return $this->redirect(['action' => 'view', $eventID]);
                } else {
                    // Error while trying to save
                    $this->Flash->error('Une erreur est survenue. Veuillez réessayer.');
                }
            }
        } else {
            $this->Flash->error('Vous n\'êtes pas autorisé à accéder à ce contenu.');
            return $this->redirect(['action' => 'view', $eventID]);
        }
    }

    public function invitesolo($eventID)
    {
        // Get current user from auth
        $u = $this->Auth->user();
        // Create new entity
        $n = $this->Events->newEntity();
        // Share to the view
        $this->set(compact('n'));
        // Request
        $req = $this->Events->find()
            ->where(['Events.id' => $eventID])
            ->contain(['Users', 'Guests', 'Guests.Users'])
            ->select(['Events.id', 'Events.title', 'Events.user_id', 'Users.login', 'Users.id']);
        // Get the first record
        $event = $req->first();

        // Check if current user is author's event
        if ($this->isCurrentAuthor($event->user_id)) {

            // Query to find all guests
            $req_guests = $this->Events->Guests->find()
                ->select(['user_id'])
                ->where(['event_id' => $eventID]);

            // Query to find all users
            $req_users = $this->Events->Users->find()
                ->where(['Users.id !=' => $u['id'], 'Users.id NOT IN' => $req_guests])
                ->select(['Users.id', 'Users.login'])
                ->toArray();

            // Create array of all users
            $users = [];
            foreach ($req_users as $user) {
                // For each results add to array ( id as value and login as wording
                $users[$user['id']] = $user['login'];
            }
            // Share to the view
            $this->set(compact('event', 'users', 'req_guests'));

            // Check if is from post method
            if ($this->request->is(['post'])) {

                // Get form data
                $n = $this->Events->patchEntity($n, $this->request->getData());
                $n->event_id = intval($eventID);
                $n->status = 'validated';

                // Disable self invitation
                if ($n->user_id === $u['id']) {
                    $this->Flash->error('Vous participez déjà à cet événément');
                    return $this->redirect(['action' => 'invite', $eventID]);
                }

                // Check if invitation already sent to user
                $existing = $this->Events->Guests->find()->where(['user_id' => $n->user_id, 'event_id' => $n->event_id]);
                $firstEl = $existing->first();

                if ($firstEl) {
                    $this->Flash->error('Une invitation a déjà été envoyée à l\'utilisateur');
                    return $this->redirect(['action' => 'invite', $eventID]);
                }

                // Test saving record on database
                if ($result = $this->Events->Guests->save($n)) {
                    $this->Flash->success('Votre invitation a été correctement envoyée');
                    return $this->redirect(['action' => 'view', $eventID]);
                }
                else {
                    // Error while trying to save
                    $this->Flash->error('Une erreur est survenue. Veuillez réessayer.');
                }

            }
        } else {
            $this->Flash->error('Vous n\'êtes pas autorisé à accéder à ce contenu.');
            return $this->redirect(['action' => 'view', $eventID]);
        }
    }

    public function delete($eventID)
    {
        // Allow method to access on this method
        $this->request->allowMethod('post', 'delete');
        // Request
        $e = $this->Events->find()->where(['id' => $eventID]);
        // If not result found
        if ($e->isEmpty()) {
            $this->Flash->error('Une erreur est survenue lors de la tentative de suppression. L\'événement n\'existe pas');
            return $this->redirect(['action' => 'index']);
        }
        // Get the first record as element
        $event = $e->first();
        // Check if current user is author's event
        if ($this->isCurrentAuthor($event->user_id)) {
            if ($this->Events->delete($event)) {
                $this->Flash->success('L\'événement a bien été supprimé');
                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error('Suppression de l\'événement impossible');
            return $this->redirect(['action' => 'index']);
        }
        $this->Flash->error('Vous n\'êtes pas autorisé à effectuer cette action');
        $this->redirect(['action' => 'view', $eventID]);
    }
}
